@using System.Security.Claims
@model EcoNet.Models.LoginViewModel

<div id="BarMessages" class="Messages">
    <div class="HeaderBarMessages">
        <label>Mensajes</label>
        <svg id="ArrowUp" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
        </svg>
        <svg id="ArrowDown" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
        </svg>

    </div>
</div>

<div id="VentanaChat" class="chat-box">
    <div class="chat-header">
        <img src="https://via.placeholder.com/40" alt="User">
        <div class="chat-info">
            <div id="chat-title" class="title">Chat Title</div>
            <div id="chat-subtitle" class="subtitle">Subtitle or status</div>
        </div>
        <button type="button" id="closeMessages" class="close BtnClose" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div id="chatBody" class="chat-body">
    </div>
    <div class="chat-footer">
        <input id="messageInput" type="text" placeholder="Type your message...">
        <button id="sendButton">Send</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.4/signalr.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.3/font/bootstrap-icons.min.css">
@{
    string userLogged = User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<script>

    var chatId = 0;
    var userLogged = '@userLogged';
    
    function addOfferToChat(item) {
        const chatBody = document.getElementById("chatBody");

        const offerDiv = document.createElement("div");
        offerDiv.className = item.creador == userLogged ? "message-right" : "message-left";

        const priceLabel = document.createElement("label");
        priceLabel.textContent = `Oferta: ${item.precio}€`;
        priceLabel.className = "price-label";

        const iconContainer = document.createElement("div");
        iconContainer.className = "icon-container";

        const acceptIcon = document.createElement("i");
        acceptIcon.className = "bi bi-check-circle-fill text-success accept-icon";
        acceptIcon.style.cursor = "pointer";
        acceptIcon.style.marginRight = "10px";

        const rejectIcon = document.createElement("i");
        rejectIcon.className = "bi bi-x-circle-fill text-danger reject-icon";
        rejectIcon.style.cursor = "pointer";

        if (item.aceptada == 0) // Si no está ni aceptada ni rechazada añadimos los eventos
        {
            acceptIcon.addEventListener("click", async function () {
                await fetch(`/Oferta/UpdateOferta?idOferta=${item.idOferta}&aceptada=${1}`);
            });

            rejectIcon.addEventListener("click", async function () {
                await fetch(`/Oferta/UpdateOferta?idOferta=${item.idOferta}&aceptada=${-1}`);
            });
        }
        else if (item.aceptada == 1) {
            rejectIcon.className = "disabled-icon";
        }
        else {
            acceptIcon.className = "disabled-icon";
        }

        offerDiv.appendChild(priceLabel);
        iconContainer.appendChild(acceptIcon);
        iconContainer.appendChild(rejectIcon);
        offerDiv.appendChild(iconContainer);

        chatBody.appendChild(offerDiv);
    }

    


    document.addEventListener("DOMContentLoaded", async function () {
        const arrowUp = document.getElementById("ArrowUp");
        const arrowDown = document.getElementById("ArrowDown");
        const barMessages = document.getElementById("BarMessages");
        const closeBtn = document.getElementById("closeMessages");
        const ventanaChat = document.getElementById("VentanaChat");
        const confirmChoice = document.getElementById("confirmChoice");

        arrowDown.style.display = "none"; // Mostrar inicialmente solo la flecha hacia arriba
        

        // Obtener los chats y añadir los encabezados de chat
        const chats = await fetch(`/Chat/GetChats?`).then(response => response.json());
        chats.forEach(chat => {
            addChatHeader(chat.nombreDestinatario, chat.tituloAnuncio, chat.chat.idChat);
        });

        barMessages.style.height = "auto";
        
        
        // Manejo de flechas para mostrar y esconder los chats
        arrowUp.addEventListener("click", function () {
            const headerChats = document.querySelectorAll(".HeaderChat");
            headerChats.forEach(function (chat) {
                chat.style.display = "flex"; // Mostrar todos los divs
            });
            arrowUp.style.display = "none"; // Esconder flecha hacia arriba
            arrowDown.style.display = "inline"; // Mostrar flecha hacia abajo
            barMessages.style.height = "400px";
        });

        arrowDown.addEventListener("click", function () {
            const headerChats = document.querySelectorAll(".HeaderChat");
            headerChats.forEach(function (chat) {
                chat.style.display = "none"; // Esconder todos los divs
            });
            arrowDown.style.display = "none"; // Esconder flecha hacia abajo
            arrowUp.style.display = "inline"; // Mostrar flecha hacia arriba
            barMessages.style.height = "auto";
        });

        

        // Ahora que los chats están en el DOM, podemos asignar los eventos
        const headerChats = document.querySelectorAll(".HeaderChat");
        headerChats.forEach(function (headerChat) {
            headerChat.addEventListener("click", async function (event) {
                chatId = parseInt(headerChat.id);
                ventanaChat.style.display = "flex";

                const chatBody = document.getElementById("chatBody");
                chatBody.innerHTML = "";

                const [messages, offers, chatHeaderInfo] = await Promise.all([
                    fetch(`/Chat/GetMessages?chatId=${chatId}`).then(response => response.json()),
                    fetch(`/Chat/GetOffers?chatId=${chatId}`).then(response => response.json()),
                    fetch(`/Chat/GetChat?chatId=${chatId}`).then(response => response.json())
                ]);

                // Combinar y ordenar los mensajes y ofertas por fecha
                const combined = [...messages, ...offers].sort((a, b) => new Date(a.horaCreacion) - new Date(b.fechaCreacion));

                const chatTittle = document.getElementById("chat-title");
                const chatSubtittle = document.getElementById("chat-subtitle");

                chatTittle.textContent = chatHeaderInfo.tituloAnuncio;
                chatSubtittle.textContent = chatHeaderInfo.nombreDestinatario;


                combined.forEach(item => {
                    if (item.idMensaje !== undefined) { // Si tiene el campo es un mensaje
                        const div = document.createElement("div");
                        div.textContent = item.texto;
                        div.className = item.creador == userLogged ? "message-right" : "message-left";
                        chatBody.appendChild(div);
                    } else {
                        addOfferToChat(item);
                    }
                });

                chatBody.scrollTop = chatBody.scrollHeight; // Para que el scroll empiece abajo del todo
            });
        });

        closeBtn.addEventListener("click", function () {
            ventanaChat.style.display = "none";
        });
    });

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    connection.start().then(() => {
        console.log("Conexión establecida con éxito.");
    }).catch(function (err) {
        console.error("Error al conectar con el Hub:", err.toString());
    });

    connection.on("ReceiveMessage", function (user, message) {
        const msg = message;
        const div = document.createElement("div");
        div.textContent = msg;
        div.className = user == userLogged ? "message-right" : "message-left";
        document.getElementById("chatBody").appendChild(div);
    });

    document.getElementById("sendButton").addEventListener("click", function (event) {
        const messageInput = document.getElementById("messageInput");
        console.log("Enviando mensaje con los siguientes datos:", {
            userLogged,
            message: messageInput.value,
            chatId
        });

        if (userLogged && messageInput.value && chatId > 0) { // Asegúrate de que chatId es válido
            connection.invoke("SendMessage", parseInt(userLogged), messageInput.value, chatId)
                .then(() => messageInput.value = "")
                .catch(function (err) {
                    console.error("Error al enviar el mensaje:", err.toString());
                });
        } else {
            alert("Algo ha ido mal!");
            console.error("Usuario, mensaje o chatId no son válidos.");
        }
        event.preventDefault();
    });

    
    function addChatHeader(NombreUsuario, NombreAnuncio, idAnuncio) {
        const barMessages = document.getElementById("BarMessages");

        const chatHeaderDiv = document.createElement("div");
        chatHeaderDiv.className = "HeaderChat";
        chatHeaderDiv.setAttribute("id", idAnuncio);
        chatHeaderDiv.style.display = 'none'; // para que no se muestren al prinicipio

        const icon = document.createElement("i");
        icon.className = "bi bi-person-circle";
        icon.style.fontSize = "2.5rem";
        
        const textContainer = document.createElement("div");
        textContainer.style.display = "flex";
        textContainer.style.flexDirection = "column";
        textContainer.style.alignItems = "flex-end"; // Alinea los textos a la derecha
        textContainer.style.marginLeft = "auto"; // Empuja el contenedor hacia la derecha
        
        const anuncioLabel = document.createElement("label");
        anuncioLabel.textContent = NombreAnuncio;
        anuncioLabel.style.fontSize = "1rem";
        anuncioLabel.style.fontWeight = "bold";
        
        const usuarioLabel = document.createElement("label");
        usuarioLabel.textContent = NombreUsuario;
        usuarioLabel.style.fontSize = "0.8rem";
        
        textContainer.appendChild(anuncioLabel);
        textContainer.appendChild(usuarioLabel);

        chatHeaderDiv.appendChild(icon);
        chatHeaderDiv.appendChild(textContainer);

        barMessages.appendChild(chatHeaderDiv);
    }
</script>
